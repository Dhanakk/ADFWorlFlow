{
	"name": "conditionalSplitswitchcase",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_blobempfile",
						"type": "DatasetReference"
					},
					"name": "inputblobempdata"
				},
				{
					"dataset": {
						"referenceName": "ds_deptblob",
						"type": "DatasetReference"
					},
					"name": "inputblobdeptdata"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_outputdataflow",
						"type": "DatasetReference"
					},
					"name": "ITemployeesSink"
				},
				{
					"dataset": {
						"referenceName": "ds_outputdataflow",
						"type": "DatasetReference"
					},
					"name": "HREmployeeSink"
				},
				{
					"dataset": {
						"referenceName": "ds_outputdataflow",
						"type": "DatasetReference"
					},
					"name": "OtherEmployeeSink"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "split1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as string,",
				"          name as string,",
				"          country as string,",
				"          department as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false) ~> inputblobempdata",
				"source(output(",
				"          deptid as string,",
				"          depname as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     ignoreNoFilesFound: false) ~> inputblobdeptdata",
				"inputblobempdata, inputblobdeptdata join(department == deptid,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"derivedColumn1 split(equals(deptid,'1'),",
				"     equals(deptid,'2'),",
				"     disjoint: false,",
				"     partitionBy('hash', 1)) ~> split1@(ITEmployees, HREmployees, OtherEmployees)",
				"join1 derive(name = upper(name),",
				"          newcountrycolumn = iif(isNull(country), 'unknown country', upper(country))) ~> derivedColumn1",
				"split1@ITEmployees sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['ITEmployeesData'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          empid,",
				"          name,",
				"          department,",
				"          deptid,",
				"          depname,",
				"          Country = newcountrycolumn",
				"     ),",
				"     partitionBy('hash', 1)) ~> ITemployeesSink",
				"split1@HREmployees sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['HREmployeesData'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          empid,",
				"          name,",
				"          department,",
				"          deptid,",
				"          depname,",
				"          country = newcountrycolumn",
				"     ),",
				"     partitionBy('hash', 1)) ~> HREmployeeSink",
				"split1@OtherEmployees sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['OtherEmployeeData'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          empid,",
				"          name,",
				"          department,",
				"          deptid,",
				"          depname,",
				"          country = newcountrycolumn",
				"     ),",
				"     partitionBy('hash', 1)) ~> OtherEmployeeSink"
			]
		}
	}
}